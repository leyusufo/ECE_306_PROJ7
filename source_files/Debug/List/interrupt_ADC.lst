###############################################################################
#
# IAR C/C++ Compiler V7.20.1.997/W32 for MSP430           23/Apr/2021  20:27:56
# Copyright 1996-2020 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.20
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306
#        CODE\Project_07\interrupt_ADC.c
#    Command line  =  
#        -f C:\Users\loyda\AppData\Local\Temp\EW16D6.tmp
#        ("C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306
#        CODE\Project_07\interrupt_ADC.c" -lC
#        "C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306
#        CODE\Project_07\Debug\List" -o
#        "C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306
#        CODE\Project_07\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306
#        CODE\Project_07\Debug\List\interrupt_ADC.lst
#    Object file   =  
#        C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306
#        CODE\Project_07\Debug\Obj\interrupt_ADC.r43
#
###############################################################################

C:\Users\loyda\OneDrive\Documents\CLASS FOLDERS\ECE 306\ECE 306 CODE\Project_07\interrupt_ADC.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains interrupt for ADC
      4          //
      5          //
      6          //  Loyda Yusufova
      7          //  Febreuary 12
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.20.1)
      9          //------------------------------------------------------------------------------
     10          #include  "functions.h"
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADCMEM0_L
   \                     _A_ADCMEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADCIV_L
   \                     _A_ADCIV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d0
   \   union <unnamed> _A_TB1R_L
   \                     _A_TB1R_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d4
   \   union <unnamed> _A_TB1CCR1_L
   \                     _A_TB1CCR1_L:
   \   000000                DS8 2
     12          #include "ports.h"
     13          #include "macros.h"
     14          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          unsigned int ADC_Channel=RESET_STATE;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int ADC_Left_Detect=RESET_STATE;
   \                     ADC_Left_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int ADC_Right_Detect=RESET_STATE;
   \                     ADC_Right_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int ADC_Thumb_Detect=RESET_STATE;
   \                     ADC_Thumb_Detect:
   \   000000                DS8 2
     19          
     20          #pragma vector=ADC_VECTOR

   \                                 In  segment ISR_CODE, align 2
     21          __interrupt void ADC_ISR(void){
   \                     ADC_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     22            switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){
   \   000002   1F421E07     MOV.W   &0x71e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC_ISR>_0`:
   \   000008   453C         JMP     ??ADC_ISR_0
   \   00000A   443C         JMP     ??ADC_ISR_0
   \   00000C   433C         JMP     ??ADC_ISR_0
   \   00000E   423C         JMP     ??ADC_ISR_0
   \   000010   413C         JMP     ??ADC_ISR_0
   \   000012   403C         JMP     ??ADC_ISR_0
   \   000014   003C         JMP     ??ADC_ISR_5
     23            case ADCIV_NONE:
     24              break;
     25            case ADCIV_ADCOVIFG:          // When a conversion result is written to the ADCMEM0
     26              // before its previous conversion result was read.
     27              break;
     28            case ADCIV_ADCTOVIFG:         // ADC conversion-time overflow
     29              break;
     30            case ADCIV_ADCHIIFG:          // Window comparator interrupt flags
     31              break;
     32            case ADCIV_ADCLOIFG:          // Window comparator interrupt flag
     33              break;
     34            case ADCIV_ADCINIFG:          // Window comparator interrupt flag
     35              break;
     36            case ADCIV_ADCIFG:            // ADCMEM0 memory register with the conversion result
     37              ADCCTL0 &= ~ADCENC;         // Disable ENC bit.
   \                     ??ADC_ISR_5:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     38              switch (ADC_Channel++){
   \   00001A   1F42....     MOV.W   &ADC_Channel, R15
   \   00001E   0E4F         MOV.W   R15, R14
   \   000020   1E53         ADD.W   #0x1, R14
   \   000022   824E....     MOV.W   R14, &ADC_Channel
   \   000026   0F83         SUB.W   #0x0, R15
   \   000028   0524         JEQ     ??ADC_ISR_2
   \   00002A   1F83         SUB.W   #0x1, R15
   \   00002C   1024         JEQ     ??ADC_ISR_3
   \   00002E   1F83         SUB.W   #0x1, R15
   \   000030   1C24         JEQ     ??ADC_ISR_4
   \   000032   303C         JMP     ??ADC_ISR_0
     39              case 0x00:                          // Channel A2 Interrupt
     40                ADCMCTL0 &= ~ADCINCH_2;           // Disable Last channel A2
   \                     ??ADC_ISR_2:
   \   000034   A2C30A07     BIC.W   #0x2, &0x70a
     41                ADCMCTL0 |= ADCINCH_3;            // Enable Next channel A3
   \   000038   B2D003000A07 BIS.W   #0x3, &0x70a
     42                ADC_Left_Detect = ADCMEM0;        // Move result into Global
   \   00003E   92421207.... MOV.W   &0x712, &ADC_Left_Detect
     43                ADCCTL0 |= ADCENC;                  // Enable Conversions
   \   000044   A2D30007     BIS.W   #0x2, &0x700
     44                ADCCTL0 |= ADCSC;                   // ADC start conversion*/
   \   000048   92D30007     BIS.W   #0x1, &0x700
     45                break;
   \   00004C   233C         JMP     ??ADC_ISR_0
     46              case 0x01:
     47                ADCMCTL0 &= ~ADCINCH_3;           // Disable Last channel A3
   \                     ??ADC_ISR_3:
   \   00004E   B2F0FCFF0A07 AND.W   #0xfffc, &0x70a
     48                ADCMCTL0 |= ADCINCH_5;            // Enable Next channel A5
   \   000054   B2D005000A07 BIS.W   #0x5, &0x70a
     49                ADC_Right_Detect = ADCMEM0;        // Move result into Global
   \   00005A   92421207.... MOV.W   &0x712, &ADC_Right_Detect
     50                ADCCTL0 |= ADCENC;                  // Enable Conversions
   \   000060   A2D30007     BIS.W   #0x2, &0x700
     51                ADCCTL0 |= ADCSC;                  // ADC start conversion*/
   \   000064   92D30007     BIS.W   #0x1, &0x700
     52                break;
   \   000068   153C         JMP     ??ADC_ISR_0
     53              case 0x02:
     54                ADCMCTL0 &= ~ADCINCH_5;                   //disable channel 5
   \                     ??ADC_ISR_4:
   \   00006A   B2F0FAFF0A07 AND.W   #0xfffa, &0x70a
     55                ADCMCTL0 |= ADCINCH_2;                    // enable channel A2
   \   000070   A2D30A07     BIS.W   #0x2, &0x70a
     56                ADC_Thumb_Detect = ADCMEM0;               // Move result into Global
   \   000074   92421207.... MOV.W   &0x712, &ADC_Thumb_Detect
     57                ADC_Channel=RESET_STATE;
   \   00007A   8243....     MOV.W   #0x0, &ADC_Channel
     58                TB1CCTL1 &= ~CCIFG;                       //clear any pending interrupts for TimerB0 CCR1
   \   00007E   92C3C403     BIC.W   #0x1, &0x3c4
     59                TB1CCR1 = TB1R + TB1CCR1_INTERVAL;        //add interval for TB1CCR1
   \   000082   1F42D003     MOV.W   &0x3d0, R15
   \   000086   3F50350C     ADD.W   #0xc35, R15
   \   00008A   824FD403     MOV.W   R15, &0x3d4
     60                TB1CCTL1 |= CCIE;                         //CCR1 enable interrupt 25ms
   \   00008E   B2D01000C403 BIS.W   #0x10, &0x3c4
     61                break;
     62              default:
     63                break;
     64              }
     65              break;
     66                
     67            default:
     68              break;
     69            }
     70          }
   \                     ??ADC_ISR_0:
   \   000094   1E17         POPM.W  #0x2, R15
   \   000096   0013         RETI
   \   000098                REQUIRE _A_ADCCTL0_L
   \   000098                REQUIRE _A_ADCMCTL0_L
   \   000098                REQUIRE _A_ADCMEM0_L
   \   000098                REQUIRE _A_TB1CCTL1_L
   \   000098                REQUIRE _A_TB1CCR1_L
   \   000098                REQUIRE _A_TB1R_L
   \   000098                REQUIRE _A_ADCIV_L

   \                                 In  segment INTVEC, offset 0x3a, root
   \                     `??ADC_ISR::??INTVEC 58`:
   \   00003A   ....         DC16    ADC_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   ADC_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ADC_Channel
     152  ADC_ISR
       2  ADC_ISR::??INTVEC 58
       2  ADC_Left_Detect
       2  ADC_Right_Detect
       2  ADC_Thumb_Detect
       2  _A_ADCCTL0_L
       2  _A_ADCIV_L
       2  _A_ADCMCTL0_L
       2  _A_ADCMEM0_L
       2  _A_TB1CCR1_L
       2  _A_TB1CCTL1_L
       2  _A_TB1R_L

 
  14 bytes in segment DATA16_AN
   8 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 152 bytes in segment ISR_CODE
 
 152 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
   8 bytes of DATA  memory (+ 14 bytes shared)

Errors: none
Warnings: none
